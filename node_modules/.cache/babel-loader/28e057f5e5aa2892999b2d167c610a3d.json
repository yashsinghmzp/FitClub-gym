{"ast":null,"code":"import { time } from '@motionone/utils';\nimport { defaults } from './defaults.es.js';\nimport { calcDampingRatio } from './utils.es.js';\nimport { hasReachedTarget } from '../utils/has-reached-target.es.js';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\n\nvar spring = function spring() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$stiffness = _ref.stiffness,\n      stiffness = _ref$stiffness === void 0 ? defaults.stiffness : _ref$stiffness,\n      _ref$damping = _ref.damping,\n      damping = _ref$damping === void 0 ? defaults.damping : _ref$damping,\n      _ref$mass = _ref.mass,\n      mass = _ref$mass === void 0 ? defaults.mass : _ref$mass,\n      _ref$from = _ref.from,\n      from = _ref$from === void 0 ? 0 : _ref$from,\n      _ref$to = _ref.to,\n      to = _ref$to === void 0 ? 1 : _ref$to,\n      _ref$velocity = _ref.velocity,\n      velocity = _ref$velocity === void 0 ? 0.0 : _ref$velocity,\n      restSpeed = _ref.restSpeed,\n      restDistance = _ref.restDistance;\n\n  velocity = velocity ? time.s(velocity) : 0.0;\n  var state = {\n    done: false,\n    hasReachedTarget: false,\n    current: from,\n    target: to\n  };\n  var initialDelta = to - from;\n  var undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n  var dampingRatio = calcDampingRatio(stiffness, damping, mass);\n  var isGranularScale = Math.abs(initialDelta) < 5;\n  restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n  restDistance || (restDistance = isGranularScale ? 0.005 : 0.5);\n  var resolveSpring;\n\n  if (dampingRatio < 1) {\n    var angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio); // Underdamped spring (bouncy)\n\n    resolveSpring = function resolveSpring(t) {\n      return to - Math.exp(-dampingRatio * undampedAngularFreq * t) * ((-velocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n    };\n  } else {\n    // Critically damped spring\n    resolveSpring = function resolveSpring(t) {\n      return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t);\n    };\n  }\n\n  return function (t) {\n    state.current = resolveSpring(t);\n    var currentVelocity = t === 0 ? velocity : calcGeneratorVelocity(resolveSpring, t, state.current);\n    var isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n    var isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;\n    state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n    state.hasReachedTarget = hasReachedTarget(from, to, state.current);\n    return state;\n  };\n};\n\nexport { spring };","map":{"version":3,"names":["time","defaults","calcDampingRatio","hasReachedTarget","calcGeneratorVelocity","spring","stiffness","damping","mass","from","to","velocity","restSpeed","restDistance","s","state","done","current","target","initialDelta","undampedAngularFreq","Math","sqrt","dampingRatio","isGranularScale","abs","resolveSpring","angularFreq","t","exp","sin","cos","currentVelocity","isBelowVelocityThreshold","isBelowDisplacementThreshold"],"sources":["C:/Users/MyAsus/OneDrive/Desktop/react/FitClub-Starter-master/FitClub-Starter-master/node_modules/@motionone/generators/dist/spring/index.es.js"],"sourcesContent":["import { time } from '@motionone/utils';\nimport { defaults } from './defaults.es.js';\nimport { calcDampingRatio } from './utils.es.js';\nimport { hasReachedTarget } from '../utils/has-reached-target.es.js';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\n\nconst spring = ({ stiffness = defaults.stiffness, damping = defaults.damping, mass = defaults.mass, from = 0, to = 1, velocity = 0.0, restSpeed, restDistance, } = {}) => {\n    velocity = velocity ? time.s(velocity) : 0.0;\n    const state = {\n        done: false,\n        hasReachedTarget: false,\n        current: from,\n        target: to,\n    };\n    const initialDelta = to - from;\n    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    const dampingRatio = calcDampingRatio(stiffness, damping, mass);\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDistance || (restDistance = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n        // Underdamped spring (bouncy)\n        resolveSpring = (t) => to -\n            Math.exp(-dampingRatio * undampedAngularFreq * t) *\n                (((-velocity + dampingRatio * undampedAngularFreq * initialDelta) /\n                    angularFreq) *\n                    Math.sin(angularFreq * t) +\n                    initialDelta * Math.cos(angularFreq * t));\n    }\n    else {\n        // Critically damped spring\n        resolveSpring = (t) => {\n            return (to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t));\n        };\n    }\n    return (t) => {\n        state.current = resolveSpring(t);\n        const currentVelocity = t === 0\n            ? velocity\n            : calcGeneratorVelocity(resolveSpring, t, state.current);\n        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        const isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n        state.hasReachedTarget = hasReachedTarget(from, to, state.current);\n        return state;\n    };\n};\n\nexport { spring };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}